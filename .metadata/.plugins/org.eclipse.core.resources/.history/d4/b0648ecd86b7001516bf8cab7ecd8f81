/**
 * UfoServiceLocator.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis 1.4 Apr 22, 2006 (06:55:48 PDT) WSDL2Java emitter.
 */

package at.ufo2016;

import java.lang.reflect.Constructor;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.ServletException;

import ufo.client.ServiceLocator;

@SuppressWarnings("serial")
public class UfoServiceLocator extends org.apache.axis.client.Service implements at.ufo2016.UfoService {
	private static Logger logger = Logger.getLogger(ServiceLocator.class.getName());
	private static UfoServiceLocator instance;
	
	private String serviceUrl;
	private String delegateClass;
	
    public UfoServiceLocator() {
    }


    public UfoServiceLocator(org.apache.axis.EngineConfiguration config) {
        super(config);
    }

    public UfoServiceLocator(java.lang.String wsdlLoc, javax.xml.namespace.QName sName) throws javax.xml.rpc.ServiceException {
        super(wsdlLoc, sName);
    }
    
    public static synchronized ServiceLocator getInstance() {
		if (instance == null) {
			instance = new UfoServiceLocator();
		}
		
		return instance;
	}
    
	public void init(String url, String delegateClass) {
		this.serviceUrl = url;
		this.delegateClass = delegateClass;
	}
	
	@SuppressWarnings("unchecked")
	public UfoServiceSoap getUfoDelegate() throws ServletException {
		Class<UfoServiceSoap> cls;
		try {
			cls = (Class<UfoServiceSoap>) Class.forName(this.delegateClass);
			Constructor<UfoServiceSoap>[] c = (Constructor<UfoServiceSoap>[]) cls.getConstructors();
			Object[] arguments = {};
			UfoServiceSoap delegate = (UfoServiceSoap) c[0].newInstance(arguments);
			return delegate;
		} catch (Exception e) {
			logger.log(Level.SEVERE, "ServiceLocator: " + e);
		}
		
		return null;
	}

    // Use to get a proxy class for UfoServiceSoap
    private java.lang.String UfoServiceSoap_address = "http://localhost:5000/UfoService.asmx";

    public java.lang.String getUfoServiceSoapAddress() {
        return UfoServiceSoap_address;
    }

    // The WSDD service name defaults to the port name.
    private java.lang.String UfoServiceSoapWSDDServiceName = "UfoServiceSoap";

    public java.lang.String getUfoServiceSoapWSDDServiceName() {
        return UfoServiceSoapWSDDServiceName;
    }

    public void setUfoServiceSoapWSDDServiceName(java.lang.String name) {
        UfoServiceSoapWSDDServiceName = name;
    }

    public at.ufo2016.UfoServiceSoap getUfoServiceSoap() throws javax.xml.rpc.ServiceException {
       java.net.URL endpoint;
        try {
            endpoint = new java.net.URL(UfoServiceSoap_address);
        }
        catch (java.net.MalformedURLException e) {
            throw new javax.xml.rpc.ServiceException(e);
        }
        return getUfoServiceSoap(endpoint);
    }

    public at.ufo2016.UfoServiceSoap getUfoServiceSoap(java.net.URL portAddress) throws javax.xml.rpc.ServiceException {
        try {
            at.ufo2016.UfoServiceSoapStub _stub = new at.ufo2016.UfoServiceSoapStub(portAddress, this);
            _stub.setPortName(getUfoServiceSoapWSDDServiceName());
            return _stub;
        }
        catch (org.apache.axis.AxisFault e) {
            return null;
        }
    }

    public void setUfoServiceSoapEndpointAddress(java.lang.String address) {
        UfoServiceSoap_address = address;
    }

    /**
     * For the given interface, get the stub implementation.
     * If this service has no port for the given interface,
     * then ServiceException is thrown.
     */
    public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {
        try {
            if (at.ufo2016.UfoServiceSoap.class.isAssignableFrom(serviceEndpointInterface)) {
                at.ufo2016.UfoServiceSoapStub _stub = new at.ufo2016.UfoServiceSoapStub(new java.net.URL(UfoServiceSoap_address), this);
                _stub.setPortName(getUfoServiceSoapWSDDServiceName());
                return _stub;
            }
        }
        catch (java.lang.Throwable t) {
            throw new javax.xml.rpc.ServiceException(t);
        }
        throw new javax.xml.rpc.ServiceException("There is no stub implementation for the interface:  " + (serviceEndpointInterface == null ? "null" : serviceEndpointInterface.getName()));
    }

    /**
     * For the given interface, get the stub implementation.
     * If this service has no port for the given interface,
     * then ServiceException is thrown.
     */
    public java.rmi.Remote getPort(javax.xml.namespace.QName portName, Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {
        if (portName == null) {
            return getPort(serviceEndpointInterface);
        }
        java.lang.String inputPortName = portName.getLocalPart();
        if ("UfoServiceSoap".equals(inputPortName)) {
            return getUfoServiceSoap();
        }
        else  {
            java.rmi.Remote _stub = getPort(serviceEndpointInterface);
            ((org.apache.axis.client.Stub) _stub).setPortName(portName);
            return _stub;
        }
    }

    public javax.xml.namespace.QName getServiceName() {
        return new javax.xml.namespace.QName("http://ufo2016.at/", "UfoService");
    }

    private java.util.HashSet ports = null;

    public java.util.Iterator getPorts() {
        if (ports == null) {
            ports = new java.util.HashSet();
            ports.add(new javax.xml.namespace.QName("http://ufo2016.at/", "UfoServiceSoap"));
        }
        return ports.iterator();
    }

    /**
    * Set the endpoint address for the specified port name.
    */
    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
        
if ("UfoServiceSoap".equals(portName)) {
            setUfoServiceSoapEndpointAddress(address);
        }
        else 
{ // Unknown Port Name
            throw new javax.xml.rpc.ServiceException(" Cannot set Endpoint Address for Unknown Port" + portName);
        }
    }

    /**
    * Set the endpoint address for the specified port name.
    */
    public void setEndpointAddress(javax.xml.namespace.QName portName, java.lang.String address) throws javax.xml.rpc.ServiceException {
        setEndpointAddress(portName.getLocalPart(), address);
    }

}
